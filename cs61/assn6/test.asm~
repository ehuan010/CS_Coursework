orig x3000

LEA R0, PROMPT ;OUT THE PROMPT
PUTS
LD R0, NEWLINE_3000 ;OUT NEWLINE
OUT
LD R0, SUB_INPUT_TO_DEC ;CONVERT INPUT TO DECIMAL
JSRR R0
LD R0, SUB_SET_HEX_ARRAY ;STORE THE DECIMAL REPRESENTATION OF EACH HEX CHAR INTO ARRAY
JSRR R0

;STARTING AT x4100 IS THE 4 DEC VALUES THAT REPRESENT THE EACH HEX VALUE, CONVERT THEM TO HEX AND OUT

LD R0, SUB_DEC_TO_HEX
JSRR R0

HALT
;-------------------------------------------------------------
;DATA BLOCK FOR MAIN
;-------------------------------------------------------------
PROMPT .STRINGZ "ENTER A NUMBER BETWEEN [0,65535] AND PRESS ENTER"
SUB_INPUT_TO_DEC .FILL x3200
NEWLINE_3000 .FILL xA
SUB_SET_HEX_ARRAY .FILL x3400
SUB_DEC_TO_HEX .FILL x3600


;-------------------------------------------------------------------------------------------------
;SUBROUTINE: SUB_INPUT_TO_DEC
;INPUT: USER INPUT 
;POST CONDITION: CONVERTS TO USER INPUT TO DEC AND STORE IN R4
;RETURN VALUE: R4 (USER INPUT IN DEC)
;-------------------------------------------------------------------------------------------------
.orig x3200
;----------------------------------
;INSTRUCTION BLOCK FOR SUBROUTINE
;----------------------------------
;BACK UP ALL MODIFIED REGISTERS EXCEPT THE RETURN REGISTER
ST R0, BACK_UP_R0_3200
ST R1, BACK_UP_R1_3200
ST R2, BACK_UP_R2_3200
ST R3, BACK_UP_R3_3200
;ST R4, BACK_UP_R4_3200
ST R5, BACK_UP_R5_3200
ST R6, BACK_UP_R6_3200
ST R7, BACK_UP_R7_3200

;ALGORITHIM
LD R1, ENTER ;R1 HOLDS 10
LD R2, NENTER ;R2 HOLDS -10
LD R3, ARRAY ;R3 HOLDS START OF ARRAY 
LD R5, COUNTER ;R5 HOLDS HOW MANY INPUTS USER TYPED IN

WHILE_LOOP
GETC ;GET INPUT
OUT
ADD R0, R0, R2 ;SUBTRACT 10
BRz END_WHILE_LOOP ;IF 0 ENTER WAS PRESSED
ADD R0, R0, R1 ;ELSE ADD 10
STR R0, R3, #0 ;STORE INPUT INTO ARRAY
ADD R5, R5, #1 ;INCREMENT COUNTER
ADD R3, R3, #1 ;INCREMENT ARRAY ADDRESS
BRnzp WHILE_LOOP
END_WHILE_LOOP

LD R3, ARRAY
ADD R3, R3, R5
ADD R3, R3, #-1 ;R3 HOLDS THE LAST ADDRESS
LDR R4, R3, #0
LD R6, ASCII
ADD R4, R4, R6 ;R4 NOW HOLDS THE DEC VALUE OF THE ONES PLACE
BRz END_LOOP
ADD R5, R5, #-1
BRz END_LOOP

TENS_LOOP
ADD R3, R3, #-1 ;DECREMENT THE ADDRESS
LDR R2, R3, #0 ;R2 HOLDS THE PREVIOUS # IN ARRAY
ADD R2, R2, R6 ;CONVERT R2 INTO DECIMAL 
LD R1, POWER ;POWER IS THE 10, 100, 1000, 10000
LD R0, POWER
MULTIPLY_LOOP1
ADD R2, R2, #-1 ;DECREMENT THE ITERATOR (USER INPUT)
BRz END_MULTIPLY_LOOP1
ADD R1, R1, R0 ;MULTIPLY POWER BY USER INPUT TIMES
BRnzp MULTIPLY_LOOP1
END_MULTIPLY_LOOP1
ADD R4, R4, R1 ;ADD R2 WHICH IS THE CALCULATED POWER INTO THE SUM
ADD R5, R5, #-1 ;DECREMENT COUNTER
BRz END_LOOP

HUNDREDS_LOOP
ADD R3, R3, #-1 ;DECREMENT THE ADDRESS
LDR R2, R3, #0 ;R2 HOLDS THE PREVIOUS # IN ARRAY
ADD R2, R2, R6 ;CONVERT R2 INTO DECIMAL 
LD R1, POWER100 ;POWER IS THE 10, 100, 1000, 10000
LD R0, POWER100
MULTIPLY_LOOP2
ADD R2, R2, #-1 ;DECREMENT THE ITERATOR (USER INPUT)
BRz END_MULTIPLY_LOOP2
ADD R1, R1, R0 ;MULTIPLY POWER BY USER INPUT TIMES
BRnzp MULTIPLY_LOOP2
END_MULTIPLY_LOOP2
ADD R4, R4, R1 ;ADD R2 WHICH IS THE CALCULATED POWER INTO THE SUM
ADD R5, R5, #-1 ;DECREMENT COUNTER
BRz END_LOOP
END_HUNDRED_LOOP

THOUSANDS_LOOP
ADD R3, R3, #-1 ;DECREMENT THE ADDRESS
LDR R2, R3, #0 ;R2 HOLDS THE PREVIOUS # IN ARRAY
ADD R2, R2, R6 ;CONVERT R2 INTO DECIMAL 
LD R1, POWER1K ;POWER IS THE 10, 100, 1000, 10000
LD R0, POWER1K
MULTIPLY_LOOP3
ADD R2, R2, #-1 ;DECREMENT THE ITERATOR (USER INPUT)
BRz END_MULTIPLY_LOOP3
ADD R1, R1, R0 ;MULTIPLY POWER BY USER INPUT TIMES
BRnzp MULTIPLY_LOOP3
END_MULTIPLY_LOOP3
ADD R4, R4, R1 ;ADD R2 WHICH IS THE CALCULATED POWER INTO THE SUM
ADD R5, R5, #-1 ;DECREMENT COUNTER
BRz END_LOOP
END_THOUSANDS_LOOP

TEN_THOUSANDS_LOOP
ADD R3, R3, #-1 ;DECREMENT THE ADDRESS
LDR R2, R3, #0 ;R2 HOLDS THE PREVIOUS # IN ARRAY
ADD R2, R2, R6 ;CONVERT R2 INTO DECIMAL 
LD R1, POWER10K ;POWER IS THE 10, 100, 1000, 10000
LD R0, POWER10K
MULTIPLY_LOOP4
ADD R2, R2, #-1 ;DECREMENT THE ITERATOR (USER INPUT)
BRz END_MULTIPLY_LOOP4
ADD R1, R1, R0 ;MULTIPLY POWER BY USER INPUT TIMES
BRnzp MULTIPLY_LOOP4
END_MULTIPLY_LOOP4
ADD R4, R4, R1 ;ADD R2 WHICH IS THE CALCULATED POWER INTO THE SUM
ADD R5, R5, #-1 ;DECREMENT COUNTER
BRz END_LOOP
END_TEN_THOUSANDS_LOOP

END_LOOP


;RESTORE REGISTERS
LD R0, BACK_UP_R0_3200
LD R1, BACK_UP_R1_3200
LD R2, BACK_UP_R2_3200
LD R3, BACK_UP_R3_3200
;LD R4, BACK_UP_R4_3200
LD R5, BACK_UP_R5_3200
LD R6, BACK_UP_R6_3200
LD R7, BACK_UP_R7_3200

;RETURN
RET

;-----------------------------------
;DATA BLOCK FOR SUB_FUNCTION_NAME
;-----------------------------------
ENTER .FILL #10
NENTER .FILL #-10
ARRAY .FILL x4000
ITERATOR .FILL #0
TEN .FILL #10
ONE .FILL #1
COUNTER .FILL #0
SUM .FILL #0
ASCII .FILL #-48
ZERO_3200 .FILL #0
POWER .FILL #10
POWER100 .FILL #100
POWER1K .FILL #1000
POWER10K .FILL #10000


BACK_UP_R0_3200 .BLKW #1
BACK_UP_R1_3200 .BLKW #1
BACK_UP_R2_3200 .BLKW #1
BACK_UP_R3_3200 .BLKW #1
;BACK_UP_R4_3200 .BLKW #1
BACK_UP_R5_3200 .BLKW #1
BACK_UP_R6_3200 .BLKW #1
BACK_UP_R7_3200 .BLKW #1

;###############################################################################################################


;-------------------------------------------------------------------------------------------------
;SUBROUTINE: SUB_SET_HEX_ARRAY
;INPUT: TAKE R4, USER INPUT IN DEC 
;POST CONDITION: STORE 4 DEC VALUES REPRESENTING EACH HEX INTO ARRAY
;RETURN VALUE: NONE, JUST SETS ARRAY OF DEC REPRESENTING WHICH HEX TO OUTPUT
;-------------------------------------------------------------------------------------------------
.orig x3400
;----------------------------------
;INSTRUCTION BLOCK FOR SUB_SET_HEX_ARRAY
;----------------------------------
;BACK UP ALL MODIFIED REGISTERS EXCEPT THE RETURN REGISTER
ST R0, BACK_UP_R0_3400
ST R1, BACK_UP_R1_3400
ST R2, BACK_UP_R2_3400
ST R3, BACK_UP_R3_3400
ST R4, BACK_UP_R4_3400
ST R6, BACK_UP_R6_3400
ST R7, BACK_UP_R7_3400

;ALGORITHIM
LD R0, NONE
LD R1, N16
LD R2, N16_2
LD R3, N16_3
LD R5, COUNTER_3400
LD R6, HEX_ARRAY

LOOP_16_TO_THE_3

ADD R4, R4, #0 ;TEST THE DECIMAL
BRn NEGATIVE_CALCULATION
BRzp END_NEGATIVE_CALCULATION 
NEGATIVE_CALCULATION
ADD R4, R4, R3 ;SUBTRACTING 16^3
ADD R5, R5, #1 ;INCREMENT THE COUNTER
ADD R4, R4, #0 ;TEST R4
BRn NEGATIVE_CALCULATION
END_NEGATIVE_CALCULATION

PLOOP_16_TO_THE_3
ADD R4, R4, R3 ;SUBTRACT 16^3
BRn UNDO_16_3
ADD R5, R5, #1 ;INCREMENT COUNTER
BRp PLOOP_16_TO_THE_3 ;REDO THE LOOP 

UNDO_16_3
NOT R3, R3
ADD R3, R3, #1 ;CONVERT R3 TO + 16^3
ADD R4, R4, R3 ;ADD 16^3
STR R5, R6, #0 ;STORE THE COUNTER INTO ARRAY
ADD R6, R6, #1 ;INCREMENT ARRAY
END_LOOP_16_TO_THE_3 

LD R5, COUNTER_3400 ;RESET COUNTER
LOOP_16_TO_THE_2
ADD R4, R4, R2 ;SUBTRACT 16^2
BRn UNDO_16_2
ADD R5, R5, #1 ;INCREMENT COUNTER
BRp LOOP_16_TO_THE_2 ;REDO THE LOOP 

UNDO_16_2
NOT R2, R2
ADD R2, R2, #1 ;CONVERT R2 TO + 16^2
ADD R4, R4, R2 ;ADD 16^2
STR R5, R6, #0 ;STORE THE COUNTER INTO ARRAY
ADD R6, R6, #1 ;INCREMENT ARRAY
END_LOOP_16_TO_THE_2

LD R5, COUNTER_3400 ;RESET COUNTER
LOOP_16_TO_THE_1
ADD R4, R4, R1 ;SUBTRACT 16^1
BRn UNDO_16_1
ADD R5, R5, #1 ;INCREMENT COUNTER
BRp LOOP_16_TO_THE_1 ;REDO THE LOOP 

UNDO_16_1
NOT R1, R1
ADD R1, R1, #1 ;CONVERT R1 TO + 16^1
ADD R4, R4, R1 ;ADD 16^1
STR R5, R6, #0 ;STORE THE COUNTER INTO ARRAY
ADD R6, R6, #1 ;INCREMENT ARRAY
END_LOOP_16_TO_THE_1

LOOP_16_TO_THE_0
STR R4, R6, #0
;LD R5, COUNTER_3400 ;RESET COUNTER
;ADD R4, R4, R0 ;SUBTRACT 16^1
;BRn UNDO_16_0
;ADD R5, R5, #1 ;INCREMENT COUNTER
;BRp LOOP_16_TO_THE_0 ;REDO THE LOOP 

;UNDO_16_0
;NOT R0, R0
;ADD R0, R0, #1 ;CONVERT R1 TO + 16^1
;ADD R4, R4, R0 ;ADD 16^1
;STR R5, R6, #0 ;STORE THE COUNTER INTO ARRAY
END_LOOP_16_TO_THE_0

;RESTORE REGISTERS
LD R0, BACK_UP_R0_3400
LD R1, BACK_UP_R1_3400
LD R2, BACK_UP_R2_3400
LD R3, BACK_UP_R3_3400
LD R4, BACK_UP_R4_3400
LD R6, BACK_UP_R6_3400
LD R7, BACK_UP_R7_3400

;RETURN
RET

;-----------------------------------
;DATA BLOCK FOR SUB_SET_HEX_ARRAY
;-----------------------------------
N16_3 .FILL #-4096
N16_2 .FILL #-256
N16 .FILL #-16
NONE .FILL #-1
COUNTER_3400 .FILL #0
HEX_ARRAY .FILL x4100

BACK_UP_R0_3400 .BLKW #1
BACK_UP_R1_3400 .BLKW #1
BACK_UP_R2_3400 .BLKW #1
BACK_UP_R3_3400 .BLKW #1
BACK_UP_R4_3400 .BLKW #1
BACK_UP_R6_3400 .BLKW #1
BACK_UP_R7_3400 .BLKW #1

;############################################################################################################

;-------------------------------------------------------------------------------------------------
;SUBROUTINE: SUB_DEC_TO_HEX
;INPUT: TAKE HEX ARRAY
;POST CONDITION: CONVERT TO HEX VALUE AND OUT
;RETURN VALUE: NONE
;-------------------------------------------------------------------------------------------------
.orig x3600

;----------------------------------
;INSTRUCTION BLOCK FOR SUB_DEC_TO_HEX
;----------------------------------
;BACK UP ALL MODIFIED REGISTERS EXCEPT THE RETURN REGISTER
ST R0, BACK_UP_R0_3600
ST R1, BACK_UP_R1_3600
ST R2, BACK_UP_R2_3600
ST R3, BACK_UP_R3_3600
ST R4, BACK_UP_R4_3600
ST R5, BACK_UP_R5_3600
ST R6, BACK_UP_R6_3600
ST R7, BACK_UP_R7_3600

;ALGORITHIM
LD R0, LOWERCASE_X
OUT ;OUT THE LOWERCASE X
LD R3, HEX_ITERATOR ;LOAD 4 INTO R3
LD R1, START_HEX_ARRAY ;R1 HOLDS START OF HEX ARRAY

BEGINNING;***********************************************************************************************************


LDR R0, R1, #0 ;R0 HOLDS THE VALUE INSIDE FIRST ADDRESS

ADD R0, R0, #0 ;TESTING R0

LD R5, N9 ;R5 HOLDS -9
LD R6, NINE ;R6 HOLDS 9
ADD R0, R0, R5 ;SUBTRACT 9
BRnz OUT_NUMBER ;IF ITS - OR 0 ITS A NUMBER NOT A LETTER
BRp BEFORE_CONVERT_LOOP

OUT_NUMBER
ADD R0, R0, R6 ;ADD 9 BACK
LD R6, ASCII_3600
ADD R0, R0, R6 ;convert that number to ascii
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
ADD R3, R3, #-1 ;DECREMENT THE ITERATOR OF 4
BRp BEGINNING ;IF ITERATOR IS + CONTINUE TO OUTPUT
BRz END_CONVERT_LOOP

BEFORE_CONVERT_LOOP
ADD R0, R0, R6 ;ADD 9 BACK THEN GO CHECK LETTERS

CONVERT_LOOP
LD R2, N15 ;R2 HOLDS -15
ADD R0, R0, R2 ;SUBTRACT 15
BRn UNDO_N15
BRzp OUT_LETTER_F

UNDO_N15
NOT R2, R2
ADD R2, R2, #1 ;CONVERT TO +15
ADD R0, R0, R2 ;ADD 15 CHECK OTHER LETTERS
;--------------------------------------------------------------
LD R2, N14 ;R2 HOLDS -14
ADD R0, R0, R2 ;SUBTRACT 14
BRn UNDO_N14
BRzp OUT_LETTER_E

UNDO_N14
NOT R2, R2
ADD R2, R2, #1 ;CONVERT TO +14
ADD R0, R0, R2 ;ADD 15 CHECK OTHER LETTERS
;--------------------------------------------------------------
LD R2, N13 ;R2 HOLDS -13
ADD R0, R0, R2 ;SUBTRACT 13
BRn UNDO_N13
BRzp OUT_LETTER_D

UNDO_N13
NOT R2, R2
ADD R2, R2, #1 ;CONVERT TO +13
ADD R0, R0, R2 ;ADD 15 CHECK OTHER LETTERS
;--------------------------------------------------------------
LD R2, N12 ;R2 HOLDS -12
ADD R0, R0, R2 ;SUBTRACT 12
BRn UNDO_N12
BRzp OUT_LETTER_C

UNDO_N12
NOT R2, R2
ADD R2, R2, #1 ;CONVERT TO +12
ADD R0, R0, R2 ;ADD 15 CHECK OTHER LETTERS
;--------------------------------------------------------------
LD R2, N11 ;R2 HOLDS -11
ADD R0, R0, R2 ;SUBTRACT 11
BRn UNDO_N11
BRzp OUT_LETTER_B

UNDO_N11
NOT R2, R2
ADD R2, R2, #1 ;CONVERT TO +11
ADD R0, R0, R2 ;ADD 15 CHECK OTHER LETTERS
;--------------------------------------------------------------
LD R2, N10 ;R2 HOLDS -10
ADD R0, R0, R2 ;SUBTRACT 10
BRn UNDO_N10
BRzp OUT_LETTER_A

UNDO_N10
NOT R2, R2
ADD R2, R2, #1 ;CONVERT TO +10
ADD R0, R0, R2 ;ADD 15 CHECK OTHER LETTERS
;---------------------------------------------------------------
OUT_LETTER_F
LD R0, LETTER_F
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
BRnzp END_OUT_LETTERS
OUT_LETTER_E
LD R0, LETTER_E
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
BRnzp END_OUT_LETTERS
OUT_LETTER_D
LD R0, LETTER_D
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
BRnzp END_OUT_LETTERS
OUT_LETTER_C
LD R0, LETTER_C
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
BRnzp END_OUT_LETTERS
OUT_LETTER_B
LD R0, LETTER_B
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
BRnzp END_OUT_LETTERS
OUT_LETTER_A
LD R0, LETTER_A
OUT
ADD R1, R1, #1 ;INCREMENT ADDRESS
BRnzp END_OUT_LETTERS
END_OUT_LETTERS
ADD R3, R3, #-1 ;DECREMENT ITERATOR
BRp BEGINNING
BRz END_CONVERT_LOOP

END_CONVERT_LOOP

;RESTORE REGISTERS
LD R0, BACK_UP_R0_3600
LD R1, BACK_UP_R1_3600
LD R2, BACK_UP_R2_3600
LD R3, BACK_UP_R3_3600
LD R4, BACK_UP_R4_3600
LD R5, BACK_UP_R5_3600
LD R6, BACK_UP_R6_3600
LD R7, BACK_UP_R7_3600

;RETURN
RET

;-----------------------------------
;DATA BLOCK FOR SUB_DEC_TO_HEX
;-----------------------------------
N15 .FILL #-15
N14 .FILL #-14
N13 .FILL #-13
N12 .FILL #-12
N11 .FILL #-11
N10 .FILL #-10
ASCII_3600 .FILL  #48
START_HEX_ARRAY .FILL x4100
LOWERCASE_X .FILL x78
HEX_ITERATOR .FILL #4
LETTER_F .FILL x46
LETTER_E .FILL x45
LETTER_D .FILL x44
LETTER_C .FILL x43
LETTER_B .FILL x42
LETTER_A .FILL x41
N9 .FILL #-9
NINE .FILL #9


BACK_UP_R0_3600 .BLKW #1
BACK_UP_R1_3600 .BLKW #1
BACK_UP_R2_3600 .BLKW #1
BACK_UP_R3_3600 .BLKW #1
BACK_UP_R4_3600 .BLKW #1
BACK_UP_R5_3600 .BLKW #1
BACK_UP_R6_3600 .BLKW #1
BACK_UP_R7_3600 .BLKW #1


.orig x4000
.end

